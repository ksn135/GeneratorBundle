{% use '../CommonAdmin/security_action.php.twig' %}

{% block index_use %}
use {{ builder.namespacePrefixWithSubfolder }}\{{ bundle_name }}\Form\Type\{{ builder.BaseGeneratorName ? builder.BaseGeneratorName ~ char(92) : "" }}FiltersType;
{% endblock %}

{% block index %}

    public function indexAction()
    {
        {{ block('security_action') }}

        $this->parseRequestForPager();

        $form = $this->getFilterForm();

        return $this->render('{{ builder.namespacePrefixForTemplate }}{{ bundle_name }}:{{ builder.BaseGeneratorName }}List:index.html.twig', $this->getAdditionalRenderParameters() + array(
            '{{ builder.ModelClass }}s' => $this->getPager(),
            'filtersUrl'                => $this->getFiltersUrl(),
            'form'                      => $form->createView(),
            'sortColumn'                => $this->getSortColumn(),
            'sortOrder'                 => $this->getSortOrder(),
            'scopes'                    => $this->getScopes(),
            'groups'                    => $this->getGroups(),
            'perPageChoices'            => $this->getPerPageChoices(),
            'columnsUrl'                => $this->getColumnsUrl(),
            'columns'                   => $this->createColumnsForm()->createView(),
            'selected_columns'          => $this->getSelectedColumns(),            
        ));
    }


    protected function createColumnsForm()
    {
        return $this->createFormBuilder(
            ['columns' => $this->getSelectedColumns()])
            ->add('columns', 's2a_select2_choice', [
                    'label' => 'Столбцы (можно передвигать их вверх/вниз с зажатой левой клавишей мыши)',
                    'multiple' => true,
                    'expanded' => true,
                    'choices' => $this->getCurrentColumns(true),
                ])
            ->getForm();         
    }

    public function columnsAction()
    {
        if ($this->get('request')->get('reset')) {

            $this->getUser()->removeParameterByTitle(
                $this->getSessionPrefix().'List\Columns',
                $this->getDoctrine()->getManager()
            );

            return new RedirectResponse($this->getListUrl());
        }

        $columns = $this->createColumnsForm();

        if ($this->getRequest()->getMethod() == "POST") {
            $columns->bind($this->get('request'));

            if ($columns->isValid()) {
                $data = $this->getRequest()->get('form',['columns' => []]);
                $parameter = $this->getUser()->setOrAddParameter(
                    $this->getSessionPrefix().'List\Columns',
                    array_values($data['columns'])
                );
                $em = $this->getDoctrine()->getManager();
                $em->persist($parameter);
                $em->flush();
            }
        }
            
        return new RedirectResponse($this->getListUrl());
    }

{% endblock %}
